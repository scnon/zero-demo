// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rbacRoleFieldNames          = builder.RawFieldNames(&RbacRole{})
	rbacRoleRows                = strings.Join(rbacRoleFieldNames, ",")
	rbacRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(rbacRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rbacRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(rbacRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	rbacRoleModel interface {
		Insert(ctx context.Context, data *RbacRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RbacRole, error)
		FindOneByRoleName(ctx context.Context, roleName string) (*RbacRole, error)
		Update(ctx context.Context, data *RbacRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRbacRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RbacRole struct {
		Id          int64          `db:"id"`          // 主键
		RoleName    string         `db:"role_name"`   // 角色名
		Permissions sql.NullString `db:"permissions"` // 权限
		CreateTime  time.Time      `db:"create_time"` // 创建时间
		UpdateTime  sql.NullTime   `db:"update_time"` // 修改时间
	}
)

func newRbacRoleModel(conn sqlx.SqlConn) *defaultRbacRoleModel {
	return &defaultRbacRoleModel{
		conn:  conn,
		table: "`rbac_role`",
	}
}

func (m *defaultRbacRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRbacRoleModel) FindOne(ctx context.Context, id int64) (*RbacRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rbacRoleRows, m.table)
	var resp RbacRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRbacRoleModel) FindOneByRoleName(ctx context.Context, roleName string) (*RbacRole, error) {
	var resp RbacRole
	query := fmt.Sprintf("select %s from %s where `role_name` = ? limit 1", rbacRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRbacRoleModel) Insert(ctx context.Context, data *RbacRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, rbacRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleName, data.Permissions)
	return ret, err
}

func (m *defaultRbacRoleModel) Update(ctx context.Context, newData *RbacRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rbacRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RoleName, newData.Permissions, newData.Id)
	return err
}

func (m *defaultRbacRoleModel) tableName() string {
	return m.table
}
